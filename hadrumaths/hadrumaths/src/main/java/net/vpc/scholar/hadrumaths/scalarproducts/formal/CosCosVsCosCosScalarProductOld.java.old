//package vpc.math.expressions;
//
//import static java.lang.Math.*;
//
//import java.io.*;
//
///**
// * User: taha
// * Date: 2 juil. 2003
// * Time: 15:13:30
// */
//public class CosCosVsCosCosScalarProductOld implements ScalarProduct {
//    public double compute(Domain domain, DFunction f1, DFunction f2) {
//        double b1 = domain.min_x;
//        double b2 = domain.max_x;
//        double b3 = domain.min_y;
//        double b4 = domain.max_y;
////        if(ScalarProductFactory.DEBUG){
////            org.lsmp.djep.djep.DJep p=new org.lsmp.djep.djep.DJep();
////            p.addStandardDiffRules();
////        }
//        CosCosFunction f1ok = (CosCosFunction) f1;
//        CosCosFunction f2ok = (CosCosFunction) f2;
//        return _ps_cc_cc(b1, b3, f1ok, f2ok)
//                + _ps_cc_cc(b2, b4, f1ok, f2ok)
//                - _ps_cc_cc(b1, b4, f1ok, f2ok)
//                - _ps_cc_cc(b2, b3, f1ok, f2ok);
//    }
//
//
//    public static double compute(Domain domain, CosCosFunction f1ok, CosCosFunction f2ok) {
//        double b1 = domain.min_x;
//        double b2 = domain.max_x;
//        double b3 = domain.min_y;
//        double b4 = domain.max_y;
//
//        return _ps_cc_cc(b1, b3, f1ok, f2ok)
//                + _ps_cc_cc(b2, b4, f1ok, f2ok)
//                - _ps_cc_cc(b1, b4, f1ok, f2ok)
//                - _ps_cc_cc(b2, b3, f1ok, f2ok);
//    }
//
//    private static double _ps_cc_cc(double x, double y, CosCosFunction f1, CosCosFunction f2) {
//        final double f1_amp = f1.amp;
//        final double f1_a = f1.a;
//        final double f1_b = f1.b;
//        final double f1_c = f1.c;
//        final double f1_d = f1.d;
//        final double f2_amp = f2.amp;
//        final double f2_a = f2.a;
//        final double f2_b = f2.b;
//        final double f2_c = f2.c;
//        final double f2_d = f2.d;
//        if(f1_a==f2_a){
//            if(f1_c==f2_c){
//                if (f1_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))*y ;
//
//                else if (f1_a == 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//            }else if(f1_c==-f2_c){
//                if (f1_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))*y ;
//
//                else if (f1_a == 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//            }else{
//                if (f1_a == 0 & f1_c == 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))*y ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*cos(f2_d)*x/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a != 0 & f1_c != 0 & f2_c == 0)
//                  return  f1_amp*f2_amp*cos(f2_d)*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a == 0 & f1_c == 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*x/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5*cos(f1_b-f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b+f2_b))*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//            }
//        }else if(f1_a==-f2_a){
//            if(f1_c==f2_c){
//                if (f1_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))*y ;
//
//                else if (f1_a == 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//            }else if(f1_c==-f2_c){
//                if (f1_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))*y ;
//
//                else if (f1_a == 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//            }else{
//                if (f1_a == 0 & f1_c == 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))*y ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*cos(f2_d)*x/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a != 0 & f1_c != 0 & f2_c == 0)
//                  return  f1_amp*f2_amp*cos(f2_d)*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a == 0 & f1_c == 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*x/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5*cos(f1_b+f2_b)*x+0.25/f1_a*sin(2*f1_a*x+f1_b-f2_b))*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//
//            }
//        }else{
//            if(f1_c==f2_c){
//                if (f1_a == 0 & f2_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f2_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)/f1_a*sin(f1_a*x+f1_b)*y ;
//
//                else if (f1_a == 0 & f2_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_d)/f2_a*sin(f2_a*x+f2_b)*y ;
//
//                else if (f1_a != 0 & f2_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))*y ;
//
//                else if (f1_a == 0 & f2_a == 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//
//                else if (f1_a != 0 & f2_a == 0 & f1_c != 0)
//                  return  f1_amp*f2_amp*cos(f2_b)/f1_a*sin(f1_a*x+f1_b)*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//
//                else if (f1_a == 0 & f2_a != 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp/f2_a*sin(f2_a*x+f2_b)*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))*(0.5*cos(f1_d-f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d+f2_d)) ;
//
//            }else if(f1_c==-f2_c){
//                if (f1_a == 0 & f2_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f2_a == 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)/f1_a*sin(f1_a*x+f1_b)*y ;
//
//                else if (f1_a == 0 & f2_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_d)/f2_a*sin(f2_a*x+f2_b)*y ;
//
//                else if (f1_a != 0 & f2_a != 0 & f1_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))*y ;
//
//                else if (f1_a == 0 & f2_a == 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//
//                else if (f1_a != 0 & f2_a == 0 & f1_c != 0)
//                  return  f1_amp*f2_amp*cos(f2_b)/f1_a*sin(f1_a*x+f1_b)*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//
//                else if (f1_a == 0 & f2_a != 0 & f1_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp/f2_a*sin(f2_a*x+f2_b)*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))*(0.5*cos(f1_d+f2_d)*y+0.25/f1_c*sin(2*f1_c*y+f1_d-f2_d)) ;
//
//            }else{
//                if (f1_a == 0 & f1_c == 0 & f2_a == 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)*x*y ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_a == 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_b)*cos(f2_d)/f1_a*sin(f1_a*x+f1_b)*y ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_a == 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*cos(f2_d)*x/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a != 0 & f1_c != 0 & f2_a == 0 & f2_c == 0)
//                  return  f1_amp*f2_amp*cos(f2_b)*cos(f2_d)/f1_a*sin(f1_a*x+f1_b)/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a == 0 & f1_c == 0 & f2_a != 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_d)/f2_a*sin(f2_a*x+f2_b)*y ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_a != 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_d)*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))*y ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_a != 0 & f2_c == 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_d)/f2_a*sin(f2_a*x+f2_b)/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a != 0 & f1_c != 0 & f2_a != 0 & f2_c == 0)
//                  return  f1_amp*f2_amp*cos(f2_d)*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))/f1_c*sin(f1_c*y+f1_d) ;
//
//                else if (f1_a == 0 & f1_c == 0 & f2_a == 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp*cos(f2_b)*x/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_a == 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*cos(f2_b)/f1_a*sin(f1_a*x+f1_b)/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_a == 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp*cos(f2_b)*x*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//
//                else if (f1_a != 0 & f1_c != 0 & f2_a == 0 & f2_c != 0)
//                  return  f1_amp*f2_amp*cos(f2_b)/f1_a*sin(f1_a*x+f1_b)*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//
//                else if (f1_a == 0 & f1_c == 0 & f2_a != 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*cos(f1_d)*f2_amp/f2_a*sin(f2_a*x+f2_b)/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a != 0 & f1_c == 0 & f2_a != 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_d)*f2_amp*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))/f2_c*sin(f2_c*y+f2_d) ;
//
//                else if (f1_a == 0 & f1_c != 0 & f2_a != 0 & f2_c != 0)
//                  return  f1_amp*cos(f1_b)*f2_amp/f2_a*sin(f2_a*x+f2_b)*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//
//                else
//                  return  f1_amp*f2_amp*(0.5/(-f1_a+f2_a)*sin((-f1_a+f2_a)*x-f1_b+f2_b)+0.5/(f1_a+f2_a)*sin((f1_a+f2_a)*x+f1_b+f2_b))*(0.5/(f1_c-f2_c)*sin((f1_c-f2_c)*y+f1_d-f2_d)+0.5/(f1_c+f2_c)*sin((f1_c+f2_c)*y+f1_d+f2_d)) ;
//            }
//        }
//    }
//
//    private static double _ps_cc_cc2(double x, double y, CosCosFunction f1, CosCosFunction f2) {
//        if (f1.amp == 0 || f2.amp == 0) {
//            return 0;
//        } else if (f1.a == 0 && f1.c == 0 && f2.a == 0 && f2.c == 0) {
//            return f1.amp * Math.cos(f1.b) * Math.cos(f1.d) * f2.amp * Math.cos(f2.b) * Math.cos(f2.d) * x * y;
//
//        } else if (f1.a != 0 && f1.c == 0 && f2.a == 0 && f2.c == 0)
//            return f1.amp * Math.cos(f1.d) * f2.amp * Math.cos(f2.b) * Math.cos(f2.d) / f1.a * Math.sin(f1.a * x + f1.b) * y;
//
//        else if (f1.a == 0 && f1.c != 0 && f2.a == 0 && f2.c == 0)
//            return f1.amp * Math.cos(f1.b) * f2.amp * Math.cos(f2.b) * Math.cos(f2.d) * x / f1.c * Math.sin(f1.c * y + f1.d);
//
//        else if (f1.a != 0 && f1.c != 0 && f2.a == 0 && f2.c == 0)
//            return f1.amp * f2.amp * Math.cos(f2.b) * Math.cos(f2.d) / f1.a * Math.sin(f1.a * x + f1.b) / f1.c * Math.sin(f1.c * y + f1.d);
//
//        else if (f1.a == 0 && f1.c == 0 && f2.a != 0 && f2.c == 0)
//            return f1.amp * Math.cos(f1.b) * Math.cos(f1.d) * f2.amp * Math.cos(f2.d) / f2.a * Math.sin(f2.a * x + f2.b) * y;
//
//        else if (f1.a != 0 && f1.c == 0 && f2.a != 0 && f2.c == 0)
//            if (f1.a == f2.a) {
//                return f1.amp * Math.cos(f1.d) * f2.amp * Math.cos(f2.d) * (0.5 * Math.cos(f1.b - f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b + f2.b)) * y;
//            } else if (f1.a == -f2.a) {
//                return f1.amp * Math.cos(f1.d) * f2.amp * Math.cos(f2.d) * (0.5 * Math.cos(f1.b + f2.b) * x + 0.25 / f1.a * Math.sin(2 * f1.a * x + f1.b - f2.b)) * y;
//            } else {
//                return f1.amp * Math.cos(f1.d) * f2.amp * Math.cos(f2.d) * (0.5 / (f1.a - f2.a) * Math.sin((f1.a - f2.a) * x + f1.b - f2.b) + 0.5 / (f1.a + f2.a) * Math.sin((f1.a + f2.a) * x + f1.b + f2.b)) * y;
//            }
//        else if (f1.a == 0 && f1.c != 0 && f2.a != 0 && f2.c == 0)
//            return f1.amp * Math.cos(f1.b) * f2.amp * Math.cos(f2.d) / f2.a * Math.sin(f2.a * x + f2.b) / f1.c * Math.sin(f1.c * y + f1.d);
//
//        else if (f1.a != 0 && f1.c != 0 && f2.a != 0 && f2.c == 0) {
//
//            if (f1.a == f2.a) {
//                return f1.amp * f2.amp * Math.cos(f2.d) * (0.5 * Math.cos(f1.b - f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b + f2.b)) / f1.c * Math.sin(f1.c * y + f1.d);
//            } else if (f1.a == -f2.a) {
//                return f1.amp * f2.amp * Math.cos(f2.d) * (0.5 * Math.cos(f1.b + f2.b) * x + 10. / 4.0 / f1.a * Math.sin(2.0 * f1.a * x + f1.b - f2.b)) / f1.c * Math.sin(f1.c * y + f1.d);
//            } else {
//                return f1.amp * f2.amp * Math.cos(f2.d) * (0.5 / (f1.a - f2.a) * Math.sin((f1.a - f2.a) * x + f1.b - f2.b) + 0.5 / (f1.a + f2.a) * Math.sin((f1.a + f2.a) * x + f1.b + f2.b)) / f1.c * Math.sin(f1.c * y + f1.d);
//            }
//
//        } else if (f1.a == 0 && f1.c == 0 && f2.a == 0 && f2.c != 0)
//            return f1.amp * Math.cos(f1.b) * Math.cos(f1.d) * f2.amp * Math.cos(f2.b) * x / f2.c * Math.sin(f2.c * y + f2.d);
//
//        else if (f1.a != 0 && f1.c == 0 && f2.a == 0 && f2.c != 0) {
//            return f1.amp * Math.cos(f1.d) * f2.amp * Math.cos(f2.b) / f1.a * Math.sin(f1.a * x + f1.b) / f2.c * Math.sin(f2.c * y + f2.d);
//        } else if (f1.a == 0 && f1.c != 0 && f2.a == 0 && f2.c != 0)
//            if (f1.c == f2.c) {
//                return f1.amp * Math.cos(f1.b) * f2.amp * Math.cos(f2.b) * x * (0.5 * Math.cos(f1.d - f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d + f2.d));
//            } else if (f1.c == -f2.c) {
//                return f1.amp * Math.cos(f1.b) * f2.amp * Math.cos(f2.b) * x * (0.5 * Math.cos(f1.d + f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d - f2.d));
//            } else {
//                return f1.amp * Math.cos(f1.b) * f2.amp * Math.cos(f2.b) * x * (0.5 / (f1.c - f2.c) * Math.sin((f1.c - f2.c) * y + f1.d - f2.d) + 0.5 / (f1.c + f2.c) * Math.sin((f1.c + f2.c) * y + f1.d + f2.d));
//
//            }
//        else if (f1.a != 0 && f1.c != 0 && f2.a == 0 && f2.c != 0)
//            if (f1.c == f2.c) {
//                return f1.amp * f2.amp * Math.cos(f2.b) / f1.a * Math.sin(f1.a * x + f1.b) * (0.5 * Math.cos(f1.d - f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d + f2.d));
//            } else if (f1.c == -f2.c) {
//                return f1.amp * f2.amp * Math.cos(f2.b) / f1.a * Math.sin(f1.a * x + f1.b) * (0.5 * Math.cos(f1.d + f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d - f2.d));
//            } else {
//                return f1.amp * f2.amp * Math.cos(f2.b) / f1.a * Math.sin(f1.a * x + f1.b) * (0.5 / (f1.c - f2.c) * Math.sin((f1.c - f2.c) * y + f1.d - f2.d) + 0.5 / (f1.c + f2.c) * Math.sin((f1.c + f2.c) * y + f1.d + f2.d));
//            }
//
//        else if (f1.a == 0 && f1.c == 0 && f2.a != 0 && f2.c != 0)
//            return f1.amp * Math.cos(f1.b) * Math.cos(f1.d) * f2.amp / f2.a * Math.sin(f2.a * x + f2.b) / f2.c * Math.sin(f2.c * y + f2.d);
//
//        else if (f1.a != 0 && f1.c == 0 && f2.a != 0 && f2.c != 0) {
//            if (f1.a == f2.a) {
//                return f1.amp * Math.cos(f1.d) * f2.amp * (0.5 * Math.cos(f1.b - f2.b) * x + 0.25 / f1.a * Math.sin(2 * f1.a * x + f1.b + f2.b)) / f2.c * Math.sin(f2.c * y + f2.d);
//            } else if (f1.a == -f2.a) {
//                return f1.amp * Math.cos(f1.d) * f2.amp * (0.5 * Math.cos(f1.b + f2.b) * x + 0.25 / f1.a * Math.sin(2 * f1.a * x + f1.b - f2.b)) / f2.c * Math.sin(f2.c * y + f2.d);
//            } else {
//                return f1.amp * Math.cos(f1.d) * f2.amp * (0.5 / (f1.a - f2.a) * Math.sin((f1.a - f2.a) * x + f1.b - f2.b) + 0.5 / (f1.a + f2.a) * Math.sin((f1.a + f2.a) * x + f1.b + f2.b)) / f2.c * Math.sin(f2.c * y + f2.d);
//            }
//        } else if (f1.a == 0 && f1.c != 0 && f2.a != 0 && f2.c != 0) {
//            if (f1.c == f2.c) {
//                return f1.amp * f2.amp * Math.cos(f2.b) / f1.a * Math.sin(f1.a * x + f1.b) * (0.5 * Math.cos(f1.d - f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d + f2.d));
//
//            } else if (f1.c == -f2.c) {
//                return f1.amp * Math.cos(f1.b) * f2.amp / f2.a * Math.sin(f2.a * x + f2.b) * (0.5 * Math.cos(f1.d + f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d - f2.d));
//
//            } else {
//                return f1.amp * Math.cos(f1.b) * f2.amp / f2.a * Math.sin(f2.a * x + f2.b) * (0.5 / (f1.c - f2.c) * Math.sin((f1.c - f2.c) * y + f1.d - f2.d) + 0.5 / (f1.c + f2.c) * Math.sin((f1.c + f2.c) * y + f1.d + f2.d));
//            }
//
//        } else {//none is null
//            if (f1.a != f2.a && f1.a != -f2.a && f1.c != f2.c && f1.c != -f2.c) {
//                return f1.amp * f2.amp * (0.5 / (f1.a - f2.a) * Math.sin((f1.a - f2.a) * x + f1.b - f2.b) + 0.5 / (f1.a + f2.a) * Math.sin((f1.a + f2.a) * x + f1.b + f2.b)) * (0.5 / (f1.c - f2.c) * Math.sin((f1.c - f2.c) * y + f1.d - f2.d) + 0.5 / (f1.c + f2.c) * Math.sin((f1.c + f2.c) * y + f1.d + f2.d));
//
//                // a couple is equal
//            } else if (f1.a == f2.a && f1.a != -f2.a && f1.c != f2.c && f1.c != -f2.c) {// f1.a-f2.a==0
//                return f1.amp * f2.amp * (0.5 * Math.cos(f1.b - f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b + f2.b)) * (0.5 / (f1.c - f2.c) * Math.sin((f1.c - f2.c) * y + f1.d - f2.d) + 0.5 / (f1.c + f2.c) * Math.sin((f1.c + f2.c) * y + f1.d + f2.d));
//
//            } else if (f1.a != f2.a && f1.a == -f2.a && f1.c != f2.c && f1.c != -f2.c) {// f1.a+f2.a==0
//                return f1.amp * f2.amp * (0.5 * Math.cos(f1.b + f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b - f2.b)) * (0.5 / (f1.c - f2.c) * Math.sin((f1.c - f2.c) * y + f1.d - f2.d) + 0.5 / (f1.c + f2.c) * Math.sin((f1.c + f2.c) * y + f1.d + f2.d));
//
//            } else if (f1.a != f2.a && f1.a != -f2.a && f1.c == f2.c && f1.c != -f2.c) {// f1.c-f2.c==0
//                return f1.amp * f2.amp * (0.5 / (f1.a - f2.a) * Math.sin((f1.a - f2.a) * x + f1.b - f2.b) + 0.5 / (f1.a + f2.a) * Math.sin((f1.a + f2.a) * x + f1.b + f2.b)) * (0.5 * Math.cos(f1.d - f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d + f2.d));
//
//            } else if (f1.a != f2.a && f1.a != -f2.a && f1.c != f2.c && f1.c == -f2.c) {// f1.c+f2.c==0
//                return f1.amp * f2.amp * (0.5 / (f1.a - f2.a) * Math.sin((f1.a - f2.a) * x + f1.b - f2.b) + 0.5 / (f1.a + f2.a) * Math.sin((f1.a + f2.a) * x + f1.b + f2.b)) * (0.5 * Math.cos(f1.d + f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d - f2.d));
//                // two couples are equals
//
//            } else if (f1.a == f2.a && f1.a != -f2.a && f1.c == f2.c && f1.c != -f2.c) {// f1.a-f2.a==0 && f1.c-f2.c==0
//                return f1.amp * f2.amp * (0.5 * Math.cos(f1.b - f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b + f2.b)) * (0.5 * Math.cos(f1.d - f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d + f2.d));
//
//            } else if (f1.a == f2.a && f1.a != -f2.a && f1.c != f2.c && f1.c == -f2.c) {// f1.a-f2.a==0 && f1.c+f2.c==0
//                return f1.amp * f2.amp * (0.5 * Math.cos(f1.b - f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b + f2.b)) * (0.5 * Math.cos(f1.d + f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d - f2.d));
//
//            } else if (f1.a != f2.a && f1.a == -f2.a && f1.c == f2.c && f1.c != -f2.c) {// f1.a+f2.a==0 && f1.c-f2.c==0
//                return f1.amp * f2.amp * (0.5 * Math.cos(f1.b + f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b - f2.b)) * (0.5 * Math.cos(f1.d - f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d + f2.d));
//
//            } else if (f1.a != f2.a && f1.a == -f2.a && f1.c != f2.c && f1.c == -f2.c) {// f1.a+f2.a==0 && f1.c+f2.c==0
//                return f1.amp * f2.amp * (0.5 * Math.cos(f1.b + f2.b) * x + 0.25 / f1.a * Math.sin(2.0 * f1.a * x + f1.b - f2.b)) * (0.5 * Math.cos(f1.d + f2.d) * y + 0.25 / f1.c * Math.sin(2.0 * f1.c * y + f1.d - f2.d));
//            }
//        }
//        throw new RuntimeException("WouldNeverBeThrownException");
//    }
//    public static void main(String[] args) {
//        try {
//            PrintStream out=new PrintStream("c:/vpc_testIt.m");
//            out.printf("JFunction vpc_testIt()%n");
//            Domain domain = new Domain(-100,+100,-100,+100);
//            generateMatlabTestFile(out,domain,
//                    new CosCosFunction(0,calc(),calc(),calc(),calc(),domain),
//                    new CosCosFunction(0,calc(),calc(),calc(),calc(),domain)
//            );
//            generateMatlabTestFile(out,domain,
//                    new CosCosFunction(0,calc(),calc(),calc(),calc(),domain),
//                    new CosCosFunction(calc(),calc(),calc(),calc(),calc(),domain)
//            );
//            generateMatlabTestFile(out,domain,
//                    new CosCosFunction(calc(),calc(),calc(),calc(),calc(),domain),
//                    new CosCosFunction(0,calc(),calc(),calc(),calc(),domain)
//            );
//            generateMatlabTestFile(out,domain,
//                    new CosCosFunction(calc(),calc(),calc(),calc(),calc(),domain),
//                    new CosCosFunction(calc(),calc(),calc(),calc(),calc(),domain)
//            );
//            for(int i=0;i<(2<<11);i++){
//                generateMatlabTestFile(out,domain,
//                        new CosCosFunction(calc(),calc(i,2),calc(i,3),calc(i,4),calc(i,5),domain),
//                        new CosCosFunction(calc(),calc(i,7),calc(i,8),calc(i,9),calc(i,10),domain)
//                );
//            }
//
//            out.close();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
//
//    private static double calc(){
//      return (Math.random()*100);
//    }
//    private static double calc(int i,int index){
//        return ((i&index)!=0)?(Math.random()*100):0;
//    }
//    private static final void generateMatlabTestFile(PrintStream out,Domain domain, CosCosFunction f1, CosCosFunction f2)throws IOException{
//        out.printf("  disp('testing (%s).*cos((%s).*x+(%s)).*cos((%s).*y+(%s)).*(%s).*cos((%s).*x+(%s)).*cos((%s).*y+(%s))');%n",
//                f1.amp,f1.a,f1.b,f1.c,f1.d,f2.amp,f2.a,f2.b,f2.c,f2.d);
//        out.printf("F = inline('(%s).*cos((%s).*x+(%s)).*cos((%s).*y+(%s)).*(%s).*cos((%s).*x+(%s)).*cos((%s).*y+(%s))');%n",
//                f1.amp,f1.a,f1.b,f1.c,f1.d,f2.amp,f2.a,f2.b,f2.c,f2.d);
//        out.printf("Q = dblquad(F,(%s),(%s),(%s),(%s)); %n",domain.min_x,domain.max_x,domain.min_y,domain.max_y);
//        double result=compute(domain,f1,f2);
//        out.printf("if(abs(Q-(%s))>1E-6)%n",result);
//        out.printf("  disp('----->ERROR<-----');%n",result);
//        out.printf("  Q%n");
//        out.printf("  disp('%s');%n",result);
//        out.printf("  disp('error (%s).*cos((%s).*x+(%s)).*cos((%s).*y+(%s)).*(%s).*cos((%s).*x+(%s)).*cos((%s).*y+(%s))');%n",
//                f1.amp,f1.a,f1.b,f1.c,f1.d,f2.amp,f2.a,f2.b,f2.c,f2.d);
//        out.printf("end%n");
//    }
//}
